#!/bin/sh

max_priority () {
    echo $Important
}

create () {
    cd $1
    echo "testing 1 2 3" > some-file
    ln ./some-file link1
    ln ./some-file link2
    ln ./link1 link3

    touch locked_link_source
	ln locked_link_source locked_link_target
	chflags uchg locked_link_source
    # Leopard allows hard links to directories
    # mkdir dir1
    # mkdir dir2
    # hardlink-util dir1 dir2/dir1-link
}


verify () {
    cd $1
    tmpfile=/tmp/hardlinks-test
    #begin-subtests

    stat -f "%i" link1 > $tmpfile
    stat -f "%i" link2 >> $tmpfile
    stat -f "%i" link3 >> $tmpfile
    stat -f "%i%f" locked_link_source >> $tmpfile
    stat -f "%i%f" locked_link_target >> $tmpfile
    test "`uniq $tmpfile | wc -l | awk '{print $1}'`" = "2"
    #x1=$?
    #subtest "on files" $x1
    
    # stat -f "%i" dir1 > $tmpfile
    # stat -f "%i" dir2/dir1-link >> $tmpfile
    # test "`uniq $tmpfile | wc -l | awk '{print $1}'`" = "1"
    # x2=$?
    # subtest "on directories" $x2
    
    #rm -f $tmpfile
    #alltrue $x1
}

clean () {
    true
}

# This is a hard test to do.  You want to make sure the same paths are linked
# to the file, but there's no easy way to test that.  Instead, just check that
# the link count is the same.  Not great, but oh well.
compare () {
    test "`stat -f '%l' $1`" = "`stat -f '%l' $2`"
}
